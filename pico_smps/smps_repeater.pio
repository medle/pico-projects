;
; This program reads PWM signal on pin0, reads OVERCURRENT signal on pin1,
; and repeats the 'limited' PWM signal on pin2.
;
; Limiting is implemented by inhibiting the PWM 'on' signal
; until it goes to 'off' state when OVERCURRENT is detected.
;
; SL (23.05.2024)
;

.program smps_repeater
.side_set 1 opt
.define LIMIT_IRQ 0

  set y, 1      ; Y starts with NORMAL state

Loop:
  in  pins, 2   ; read both PWM and LIM lines to ISR
  mov osr, isr  ; move line states to OSR
  set x, 0      ; clear X
  out x, 1      ; shift PWM line from OSR to X
  jmp !x PwmLow

PwmHigh:
  set x, 0      ; clear X
  out x, 1      ; shift LIM to X
  jmp !x PwmHighLimLow

PwmHighLimHigh:
  set y, 0 side 0 ; enter FAULT state (side effect: reset OUT to LOW)
                  ; after entering FAULT we delay processing to not see ringing
  irq LIMIT_IRQ   ; trigger the "limit reached" irq handler in software (no waiting)                
  set x, 31       ; init delay loop counter with maximum allowed value 31
  mov isr, x      ; copy counter to ISR 
  set x, 0        ; set X to 0 it'll be a source to shift from
  in x, 3         ; shift 3 bit from X left into ISR (multiply by 8)
                  ; 31*2*7 cycles in 125MHz Pico gives 4us of delay
                  ; 31*8*7 cycles in 125MHz Pico gives 16us of delay
  mov x, isr      ; return counter to X 
DelayOnFault:     
  jmp x-- DelayOnFault [7] 
  jmp Loop

PwmHighLimLow:
  jmp !y Loop     ; do nothing if in FAULT state
  jmp Loop side 1 ; repeat loop (side effect: NORMAL state set OUT to HIGH)

PwmLow:
  out x, 1 side 0 ; shift LIM to X (X=0 before this) (reset OUT to LOW)
  jmp !x PwmLowLimLow

PwmLowLimHigh:
  jmp Loop        ; do nothing

PwmLowLimLow:
  set y, 1        ; enter NORMAL state
  jmp Loop


% c-sdk {
static inline void smps_repeater_program_init(PIO pio, uint sm, uint offset, uint pin0) 
{
   // start with default confuguration
   pio_sm_config c = smps_repeater_program_get_default_config(offset);

   // two 'in' pins for reading start at the pin0
   pio_gpio_init(pio, pin0);
   pio_gpio_init(pio, pin0 + 1);
   sm_config_set_in_pins(&c, pin0); 

   // one 'sideset' output pin for writing is the 3'rd pin
   uint output_pin = pin0 + 2;
   pio_gpio_init(pio, output_pin);
   pio_sm_set_consecutive_pindirs(pio, sm, output_pin, 1, true); 
   sm_config_set_sideset_pins(&c, output_pin);

   // 'in' shifts ISR bits to left, so the least significant bits are filled
   sm_config_set_in_shift(&c, false, false, 32);
   
   // 'out' shifts OSR bits to right, so least significat bits are taken from OSR
   sm_config_set_out_shift(&c, true, false, 32);
   
   pio_sm_init(pio, sm, offset, &c);
}
%}


